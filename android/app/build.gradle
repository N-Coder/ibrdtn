apply plugin: 'com.android.application'

def ndkDir = null;
Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    ndkDir = properties.getProperty('ndk.dir')
} catch (IOException e) {}



def createVersionName() {
    if (System.getenv().containsKey("BUILD_NUMBER")) {
        if (System.getenv().containsKey("GIT_COMMIT")) {
            return rootProject.ext.versionName + "-" + System.getenv("GIT_COMMIT").substring(0, 7)
        } else {
            return rootProject.ext.versionName + "-" + System.getenv("BUILD_NUMBER")
        }
    } else {
        return rootProject.ext.versionName
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "de.tubs.ibr.dtn"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode System.getenv("BUILD_NUMBER") as Integer ?: rootProject.ext.versionCode
        versionName createVersionName()
    }
    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "publish.keystore")
            storePassword System.getenv("KEYSTORE_PASSWD")
            keyAlias System.getenv("KEY_ALIAS") ?: android.defaultConfig.applicationId
            keyPassword System.getenv("KEY_PASSWD")
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = []
    }
}

// enable signing if the keystore exists
if (android.signingConfigs.release.storeFile.exists()) {
    android.buildTypes.release.signingConfig = android.signingConfigs.release
}

///home/niko/Sync/Projects/MA-impl/IBR-DTN/android/app/src/main/jni/dtnd/Android.mk
///home/niko/Sync/Projects/MA-impl/IBR-DTN/android/app/src/main/jni/ibrcommon/Android.mk
///home/niko/Sync/Projects/MA-impl/IBR-DTN/android/app/src/main/jni/ibrdtn/Android.mk
///home/niko/Sync/Projects/MA-impl/IBR-DTN/android/app/src/main/jni/android-glue/SWIGWrapper.*
///home/niko/Sync/Projects/MA-impl/IBR-DTN/android/app/src/main/libs/*
///home/niko/Sync/Projects/MA-impl/IBR-DTN/android/app/src/main/obj/*
///home/niko/Sync/Projects/MA-impl/IBR-DTN/android/app/build

// TODO make sure that yacc is actually bison and not byacc (/home/niko/Sync/Projects/MA-impl/IBR-DTN/android/app/src/main/jni/nl-3/android_toolchain/jni/Android.mk)

task ndkBuild(type: Exec) {
    executable "sh"
    workingDir "src/main/jni"
    if (ndkDir != null) {
        args "-c", "export PATH=${ndkDir}:\$PATH; ./build.sh"
    } else {
        args "build.sh"
    }
}
preBuild.dependsOn ndkBuild

dependencies {
    api 'de.tubs.ibr.dtn:library:1.1.2'
    implementation 'com.android.support:support-v4:23.1.1'
    implementation 'com.jjoe64:graphview:3.1.+'
    implementation 'com.google.zxing:core:3.2.+'
    implementation 'com.google.zxing:android-integration:3.2.+'
}
